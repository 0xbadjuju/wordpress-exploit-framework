import { Component, Input, Output, OnChanges, SimpleChange, OnInit, EventEmitter } from '@angular/core';
import { NgClass } from '@angular/common';

@Component({
  selector: 'data-table',
  moduleId: module.id,
  templateUrl: 'data-table.component.html',
  styles: [`th i.not-sorting { color: #cccccc; }`],
  directives: [NgClass]
})

export class DataTableComponent implements OnChanges {
  private rowCount: number;
  private rowsPerPage: number;
  private currentPageIndex: number;
  private currentPage: any[];
  private totalPages: number;
  private isEOF: boolean;
  private isBOF: boolean;
  private sortingAscending: boolean;
  private sortIndex: number;

  @Input() columnHeadings: string[];
  @Input() columnKeys: string[];
  @Input() data: any[];
  @Input() tableClass: string;

  @Output() rowClick: EventEmitter = new EventEmitter();

  constructor() {
    this.rowsPerPage = 10;
    this.isEOF = false;
    this.isBOF = true;
    this.currentPageIndex = 0;
  }

  ngAfterViewChecked(): void {
    this.refresh();
  }

  refresh(): void {
    if (this.data === undefined) {
      return;
    }

    this.rowCount = this.data.length;
    this.totalPages = Math.ceil(this.rowCount / this.rowsPerPage);

    let newPage = new Array();
    let lowerBound = this.currentPageIndex * this.rowsPerPage;

    for (let i = 0; i < this.rowsPerPage; i++) {
      if (lowerBound + i < this.rowCount) {
        newPage[i] = this.data[lowerBound + i];
      }
    }

    this.currentPage = newPage;
  }

  sortColumn(columnIndex): void {
    let propertyName = this.columnKeys[columnIndex];

    if (this.sortIndex === columnIndex) {
      this.sortingAscending = !this.sortingAscending;
    }

    this.data.sort((a, b) => {
      if (a[propertyName] < b[propertyName]) {
        return this.sortingAscending ? -1 : 1;
      }

      if (a[propertyName] > b[propertyName]) {
        return this.sortingAscending ? 1 : -1;
      }

      return 0;
    });

    this.sortIndex = columnIndex;
    this.refresh();
  }

  goToNextPage(): void {
    if (!this.isEOF) {
      this.currentPageIndex += 1;
    }

    this.isEOF = (this.currentPageIndex + 1) === this.totalPages;
    this.isBOF = this.currentPageIndex === 0;
    this.refresh();
  }

  goToPreviousPage(): void {
    if (this.currentPageIndex > 0) {
      this.currentPageIndex -= 1;
    }

    this.isEOF = (this.currentPageIndex + 1) === this.totalPages;
    this.isBOF = this.currentPageIndex === 0;
    this.refresh();
  }

  ngOnChanges(changes: {[propertyName: string]: SimpleChange}) {
    if (changes['data']) {
      this.sortIndex = 0;
      this.currentPageIndex = 0;
      this.isBOF = true;
      this.refresh();
    }
  }
}
