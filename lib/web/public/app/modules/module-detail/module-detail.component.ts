import { Component, OnInit, ViewChildren, QueryList }      from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';

import { ToastyService, ToastyConfig, ToastOptions, ToastData } from 'ng2-toasty';

import { Module }        from '../shared/module'
import { Payload }       from '../shared/payload'
import { ModuleService } from '../shared/module.service'
import { ModuleOptionComponent } from './module-option.component'

@Component({
  selector: 'module-detail',
  moduleId: module.id,
  templateUrl: 'module-detail.component.html'
})

export class ModuleDetailComponent implements OnInit {
  private paramsSubscription: any;
  private module: Module = new Module();
  private payload: Payload = new Payload();
  private payloads: Payload[];
  private path: string;
  private runningModule: boolean = false;

  @ViewChildren('basicOptions') basicOptions: QueryList<ModuleOptionComponent>;
  @ViewChildren('advancedOptions') advancedOptions: QueryList<ModuleOptionComponent>;
  @ViewChildren('payloadOptions') payloadOptions: QueryList<ModuleOptionComponent>;

  constructor(
    private route: ActivatedRoute,
    private moduleService: ModuleService,
    private toastyService: ToastyService,
    private toastyConfig: ToastyConfig,
    private router: Router) {
      this.toastyConfig.theme = 'bootstrap';
  }

  ngOnInit(): void {
    this.paramsSubscription = this.route.params.subscribe(params => {
      this.path = `${params['type']}/${params['name']}`;

      this.moduleService.getModule(this.path)
          .then(module => this.module = module);

      this.moduleService.getPayloads()
          .then(payloads => this.payloads = payloads);
    });
  }

  ngOnDestroy(): void {
    this.paramsSubscription.unsubscribe();
  }

  validateOptions(options: QueryList<ModuleOptionComponent>): boolean {
    let retval: boolean = true;

    options.forEach((option: ModuleOptionComponent) => {
      if (!option.isValid()) {
        retval = false;
        console.log(option);
        this.addWarningToast('Validation Failed', `A valid value must be specified for ${option.option.name}`)
      }
    });

    return retval;
  }

  validateAllOptions(): boolean {
    let retval: boolean = true;

    if (!this.validateOptions(this.basicOptions)) retval = false;
    if (!this.validateOptions(this.advancedOptions)) retval = false;
    if (!this.validateOptions(this.payloadOptions)) retval = false;

    return retval;
  }

  runModule(): void {
    if (this.runningModule || !this.validateAllOptions()) return;

    this.runningModule = true;
    this.moduleService
        .executeModule(this.path, this.module.options, this.payload)
        .then(result => this.loadSession(result.session_id))
        .catch(error => this.addErrorToast(error));
  }

  loadSession(id: number): void {
    this.router.navigate(['session', id]);
  }

  addWarningToast(title: string, msg: string): void {
    this.toastyService.warning({
      title: title,
      msg: msg,
      showClose: true,
      timeout: 5000
    });
  }

  addErrorToast(error: any): void {
    this.runningModule = false
    this.toastyService.error({
      title: "Error",
      msg: "Failed to execute the module.",
      showClose: true,
      timeout: 5000
    });
  }

  onOptionUpdate(event: any): void {
    console.log(event);
    console.log(this.basicOptions);
  }
}
